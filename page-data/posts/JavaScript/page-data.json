{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/JavaScript",
    "result": {"pageContext":{"currentCategory":"JavaScript","categories":["All","appium","JavaScript","browser","blog"],"edges":[{"node":{"id":"81613ecf-d94d-5fcd-b333-e6ac0eb885c8","excerpt":"이전 블로그에서 게시한 게시글을 이관하였습니다. 작성일자. 2021년 5월 26일 개요  프로젝트를 하여 소스를 분석하던 도중 신기한 소스를 발견했다. 분석 에서 제공되는 배열은 에서 아래와 같이 존재 할 수 있다. 위에서 제공되는 예시와 같이  또는 이 의도하지 않게 들어갈 수 있다. 이러한 가능성은 반복문에서 문제가 발생될 가능성이 크다.  이를 해결하기위해 일반적으로 반복문 내에서 체크하는 로직을 삽입하여 처리하기도 한다.  하지만 이러한 처리방식은 아래와 같은 문제점을 야기한다. 코드가 복잡해진다. 배열이 또다른 새로운 배열로 확장되는 경우 또는 배열이 재사용되는 경우 동일하게 체크하는 로직을 삽입하여야한다. 이보다 더 좋은 방법은 없을까? 도출 그 방법은 을 사용하여 배열을 믿을 수 있는 상태로 만드는 것이다! 심플하고 간단하게 사용할 수 있다. 정리하면,  사용시, 을  로 사용하여 를 제거할 수 있다.  Reference The filter(Boolean) trick …","fields":{"slug":"/filter-boolean/"},"frontmatter":{"categories":"JavaScript","title":"filter(Boolean)를 활용한 JS 배열 관리","date":"January 15, 2023"}},"next":{"fields":{"slug":"/browser_process/"}},"previous":{"fields":{"slug":"/appium_basic/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}